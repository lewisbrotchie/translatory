{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleEnglishChange","e","valueEng","target","value","setState","prevState","objectSpread","translate","onChange","input","valueRus","console","log","translateRus","handleRussianChange","state","translatedRus","translatedEng","text","_this2","fetch","concat","then","response","json","data","catch","ex","_this3","_this4","react_default","a","createElement","className","name","type","placeholder","build_default","layout","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d187369b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"simple-keyboard/build/css/index.css\";\nimport layout from \"simple-keyboard-layouts/build/layouts/russian\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valueRus: \"\",\n      translatedRus: \"\",\n      valueEng: \"\",\n      translatedEng: \"\"\n    };\n  }\n\n  handleEnglishChange = e => {\n    const valueEng = e.target.value;\n    this.setState(prevState => ({ ...prevState, valueEng }));\n    this.translate(valueEng);\n  };\n\n  onChange = input => {\n    const valueRus = input;\n    this.setState(prevState => ({ ...prevState, valueRus }));\n    console.log(input);\n    this.translateRus(input);\n  };\n\n  handleRussianChange = e => {\n    const valueRus = e.target.value;\n    this.setState(prevState => ({ ...prevState, valueRus }));\n  };\n\n  translate(text) {\n    const apiKey =\n      \"trnsl.1.1.20181111T205010Z.da380e009414791e.33081328946bfb5aafec611465eb26142ff7b9d9\";\n    fetch(\n      `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${apiKey}&text=${text}&lang=en-ru`\n    )\n      .then(response => response.json())\n      .then(data => {\n        const translatedEng = data.text;\n        console.log(\"parsed json\", translatedEng);\n        this.setState(prevState => ({ ...prevState, translatedEng }));\n      })\n      .catch(ex => console.log(\"api error - \", ex));\n  }\n\n  translateRus(text) {\n    const apiKey =\n      \"trnsl.1.1.20181111T205010Z.da380e009414791e.33081328946bfb5aafec611465eb26142ff7b9d9\";\n    fetch(\n      `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${apiKey}&text=${text}&lang=ru-en`\n    )\n      .then(response => response.json())\n      .then(data => {\n        const translatedRus = data.text;\n        console.log(\"parsed json\", translatedRus);\n        this.setState(prevState => ({ ...prevState, translatedRus }));\n      })\n      .catch(ex => console.log(\"api error - \", ex));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-div\">\n          <header>english</header>\n          <input\n            name=\"eng\"\n            type=\"text\"\n            placeholder=\"english text\"\n            value={this.state.value}\n            onChange={this.handleEnglishChange}\n          />\n          <br />\n          {this.state.translatedEng}\n        </div>\n        <div className=\"App-div\">\n          <header>russian</header>\n          <input\n            name=\"rus\"\n            type=\"text\"\n            placeholder=\"russian text\"\n            value={this.state.valueRus}\n            onChange={this.handleRussianChange}\n          />\n          <br />\n          {this.state.translatedRus}\n        </div>\n        <div className=\"App-div\">\n          <Keyboard layout={layout} onChange={input => this.onChange(input)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}